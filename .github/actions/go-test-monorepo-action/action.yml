name: 'Go Test Monorepo'
description: 'Automatically find and test all Go packages in a monorepo'
inputs:
  go-version:
    description: 'Go version'
    default: '1.21.5'
  race:
    description: 'Add -race flag to go tests'
    default: 'true'
  only-module-list:
    description: 'Only outputs module list without running tests'
    default: 'false'
  fail-fast:
    description: 'Fail on first eror'
    default: 'true'
  continue-on-error:
    description: 'Allow errors in tests'
    default: 'false'
outputs:
  modules:
    description: "List of Go modules"
    value: ${{ steps.coveredmodules.outputs.modules }}
runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Determine OS
      id: determine-os
      shell: bash
      run: |
        detected_os=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
        echo "detected_os=$detected_os" >> $GITHUB_ENV
        echo "Detected OS: $detected_os"

    - name: Run tests and generate coverage for all modules
      id: coveredmodules
      shell: bash
      run: |
        if [[ "$detected_os" == "linux" ]]; then
          ./.github/actions/go-test-monorepo-action/go-test-monorepo-action.sh ${{ inputs.only-module-list }} ${{ inputs.race }} ${{ inputs.fail-fast }} ${{ inputs.continue-on-error }}
        elif [[ "$detected_os" == "windows" ]]; then
          pwsh -File ./.github/actions/go-test-monorepo-action/go-test-monorepo-action.ps1 ${{ inputs.only-module-list }} ${{ inputs.race }} ${{ inputs.fail-fast }} ${{ inputs.continue-on-error }}
        elif [[ "$detected_os" == "macos" ]]; then
          ./.github/actions/go-test-monorepo-action/go-test-monorepo-action.sh ${{ inputs.only-module-list }} ${{ inputs.race }} ${{ inputs.fail-fast }} ${{ inputs.continue-on-error }}
        else
          echo "::error::Unsupported OS: [$detected_os]"
          exit 1
        fi
